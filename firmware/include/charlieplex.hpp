#pragma once
#include <Eigen/Dense>
#include <cstdint>

// for small matrix
// const uint8_t NUM_ROWS = 5;
// const uint8_t NUM_COLS = NUM_ROWS - 1;
// const uint8_t LED_PINS[5] = {5, 6, 7, 8, 9};
// const uint8_t ARR_HIGH_PIN_MAP[NUM_ROWS][NUM_COLS] = {
//     {6, 7, 8, 9}, {5, 7, 8, 9}, {5, 6, 8, 9}, {5, 6, 7, 9}, {5, 6, 7, 8}};

// const uint8_t ARR_LOW_PIN_MAP[NUM_ROWS][NUM_COLS] = {
//     {5, 5, 5, 5}, {6, 6, 6, 6}, {7, 7, 7, 7}, {8, 8, 8, 8}, {9, 9, 9, 9}};

// for large matrix

const uint8_t NUM_ROWS = 16;
const uint8_t NUM_COLS = NUM_ROWS - 1;
const uint8_t LED_PINS[16] = {10, 11, 12, 13, 14, 15, 16, 17,
                              18, 19, 20, 21, 22, 23, 24, 25};

const uint8_t ARR_HIGH_PIN_MAP[NUM_ROWS][NUM_COLS] = {
    {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25},
    {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}};

const uint8_t ARR_LOW_PIN_MAP[NUM_ROWS][NUM_COLS] = {
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
    {11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
    {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
    {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
    {14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
    {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
    {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
    {17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
    {18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
    {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
    {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
    {21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
    {22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
    {23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
    {24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
    {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25}};

typedef Eigen::Matrix<bool, NUM_ROWS, NUM_COLS> DisplayMatrix;

void set_pin_high_impedence(const uint8_t& pin_num);
void set_pin_output(const uint8_t& pin_num, const bool& dir);

class LEDViz {
 public:
  LEDViz();
  void update_display(const DisplayMatrix& mat);
  void tick();

 private:
  uint8_t cur_on_led_idx_;
  Eigen::Matrix<uint8_t, Eigen::Dynamic, 2> on_leds_row_cols_;
};